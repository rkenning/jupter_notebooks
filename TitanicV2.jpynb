{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "%matplotlib inline\n",
    "def describe_catergorical(X):\n",
    "        from IPython.display import display, HTML\n",
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'FloorA',\n",
       " 'FloorB',\n",
       " 'FloorC',\n",
       " 'FloorD',\n",
    "        display(HTML(X[X.columns[X.dtypes == \"object\"]].describe().to_html()))\n"
   ]
  },
  {
       " 'FloorE',\n",
       " 'FloorF',\n",
       " 'FloorG',\n",
       " 'FloorNone',\n",
       " 'FloorT'}"
      ]
     },
     "execution_count": 293,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "X = pd.read_csv(\"train.csv\")\n",
    "\n",
    "X['Gender'] =X['Sex'].map( {'female': -1, 'male': 1} ).astype(int)\n",
    "#train = train['Embarked'].where(train['Embarked'].notnull(train),None)\n",
    "X['Embarked_clean'] = X.Embarked.fillna('N')\n",
    "X['CleanAge'] = X.Age.fillna(X.Age.mean())\n",
    "X = pd.concat([X,CleanAge], axis=1)\n",
    "def clean_cabin(x):\n",
    "    try:\n",
    "        return x[0]\n",
    "    except TypeError:\n",
    "        return \"None\"\n",
    "\n",
    "X[\"Clean_Cabin\"]    = \"Floor\"+X.Cabin.apply(clean_cabin)\n",
    "X.drop([\"Name\",\"Ticket\",\"PassengerId\",\"Sex\",\"Embarked\",\"Age\",\"Cabin\"],axis=1, inplace=True)\n",
    "set(X.Clean_Cabin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Gender</th>\n",
       "      <th>CleanAge</th>\n",
       "      <th>C</th>\n",
       "      <th>N</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>FloorA</th>\n",
       "      <th>FloorB</th>\n",
       "      <th>FloorC</th>\n",
       "      <th>FloorD</th>\n",
       "      <th>FloorE</th>\n",
       "      <th>FloorF</th>\n",
       "      <th>FloorG</th>\n",
       "      <th>FloorNone</th>\n",
       "      <th>FloorT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>0.295174</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.188552</td>\n",
       "      <td>0.002245</td>\n",
       "      <td>0.086420</td>\n",
       "      <td>0.722783</td>\n",
       "      <td>0.016835</td>\n",
       "      <td>0.052750</td>\n",
       "      <td>0.066218</td>\n",
       "      <td>0.037037</td>\n",
       "      <td>0.035915</td>\n",
       "      <td>0.014590</td>\n",
       "      <td>0.004489</td>\n",
       "      <td>0.771044</td>\n",
       "      <td>0.001122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.955979</td>\n",
       "      <td>13.002015</td>\n",
       "      <td>0.391372</td>\n",
       "      <td>0.047351</td>\n",
       "      <td>0.281141</td>\n",
       "      <td>0.447876</td>\n",
       "      <td>0.128725</td>\n",
       "      <td>0.223659</td>\n",
       "      <td>0.248802</td>\n",
       "      <td>0.188959</td>\n",
       "      <td>0.186182</td>\n",
       "      <td>0.119973</td>\n",
       "      <td>0.066890</td>\n",
       "      <td>0.420397</td>\n",
       "      <td>0.033501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Survived      Pclass       SibSp       Parch        Fare      Gender  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean     0.383838    2.308642    0.523008    0.381594   32.204208    0.295174   \n",
       "std      0.486592    0.836071    1.102743    0.806057   49.693429    0.955979   \n",
       "min      0.000000    1.000000    0.000000    0.000000    0.000000   -1.000000   \n",
       "25%      0.000000    2.000000    0.000000    0.000000    7.910400   -1.000000   \n",
       "50%      0.000000    3.000000    0.000000    0.000000   14.454200    1.000000   \n",
       "75%      1.000000    3.000000    1.000000    0.000000   31.000000    1.000000   \n",
       "max      1.000000    3.000000    8.000000    6.000000  512.329200    1.000000   \n",
       "\n",
       "         CleanAge           C           N           Q           S      FloorA  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean    29.699118    0.188552    0.002245    0.086420    0.722783    0.016835   \n",
       "std     13.002015    0.391372    0.047351    0.281141    0.447876    0.128725   \n",
       "min      0.420000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%     22.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "50%     29.699118    0.000000    0.000000    0.000000    1.000000    0.000000   \n",
       "75%     35.000000    0.000000    0.000000    0.000000    1.000000    0.000000   \n",
       "max     80.000000    1.000000    1.000000    1.000000    1.000000    1.000000   \n",
       "\n",
       "           FloorB      FloorC      FloorD      FloorE      FloorF      FloorG  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean     0.052750    0.066218    0.037037    0.035915    0.014590    0.004489   \n",
       "std      0.223659    0.248802    0.188959    0.186182    0.119973    0.066890   \n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "50%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "75%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "max      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000   \n",
       "\n",
       "        FloorNone      FloorT  \n",
       "count  891.000000  891.000000  \n",
       "mean     0.771044    0.001122  \n",
       "std      0.420397    0.033501  \n",
       "min      0.000000    0.000000  \n",
       "25%      1.000000    0.000000  \n",
       "50%      1.000000    0.000000  \n",
       "75%      1.000000    0.000000  \n",
       "max      1.000000    1.000000  "
      ]
     },
     "execution_count": 294,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "##Create the dummies\n",
    "dummies = pd.get_dummies(X['Embarked_clean'])\n",
    "X = pd.concat([X,dummies], axis=1)\n",
    "\n",
    "dummies = pd.get_dummies(X['Clean_Cabin'])\n",
    "X = pd.concat([X,dummies], axis=1)\n",
    "\n",
    "\n",
    "X.drop([\"Clean_Cabin\",\"Embarked_clean\"],axis=1, inplace=True)\n",
    "X.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "y = X.pop(\"Survived\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "numeric_variables = list(X.dtypes[X.dtypes != \"object\"].index)\n",
    "X[numeric_variables].head()\n",
    "check_train = X.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "c-stat:  0.874439438\n"
     ]
    }
   ],
   "source": [
    "model = RandomForestRegressor(n_estimators=1000,oob_score=True, n_jobs=-1,random_state=42 ,max_features=\"auto\",min_samples_leaf=5)\n",
    "model.fit(X[numeric_variables],y)\n",
    "model.oob_score_\n",
    "y_oob=model.oob_prediction_\n",
    "print \"c-stat: \", roc_auc_score(y,y_oob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\rkenn\\Anaconda2\\lib\\site-packages\\ipykernel\\__main__.py:2: FutureWarning: sort is deprecated, use sort_values(inplace=True) for INPLACE sorting\n",
      "  from ipykernel import kernelapp as app\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x27402eb8>"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\nnp6+6/3GjRtXPOZSEutis88NwHuSbKI7Ez15nvaTlhjT64CPAFTVrUl+A/hg8w3ii4G/WSSuU4G3\nJPki3b8UXAMcu8RjS5K0IhNej3UY5x7L1UnSiLIe64oN53eskqTxNdGJ1ZmjJKltrhUsSVKLTKyS\nJLXIxCpJUotMrJIktcjEKklSi0yskiS1yMQqSVKLxjKxJjklyZeaOq0zSR49z35Lfu2//4EDPgtJ\n0mo0dgtEJFkLPA04rKruSLIf3dJxc1j6AhGbNw9+lSZJ0uozdokV+Fm6lXTuAKiqHww5HknSBBnH\nW8FnAwck+WqSdyT5hUV7SJLUkrFLrFW1BTgCeDFwPfBPSZZask6SpBUZx1vBVHd1/fOA85JcTrcW\n7Ok777mhZ3u6eUmSJkWn06HT6bQ65tjVY03yYODOqrqqeX8qsE9V/fas/ZZZj9U6qpI07qzHOre9\ngLcn2Qe4A7iK7m1hSZL6buxmrEvljFWSNJsz1hVb+rWbmlrTxzgkSeNiohOrM1BJUtvG7uc2kiQN\nk4lVkqQWmVglSWqRiVWSpBaZWCVJapGJVZKkFo1lYk0yleT9Sb6e5OIk/5rkQcOOS5I0/sYysQJn\nAv9ZVQdV1aOBPwKmZu+UZM7X/vsfOOh4JUljYuwWiEhyNHBbVf3ttraqunzuvedeIGLz5hWtZiVJ\nmmDjOGM9BLhk2EFIkibTOCZWSZKGZuxuBQNfBp65tF039GxPY6FzSZosFjpfoiSfB06rqnc37w8F\n7l1Vn+3ZZ4GycZaIk6RJ1EbZuHG9FXwc8KQkVyW5HHg9cN2QY5IkTYCxnLEuhTNWSdJszlglSRox\n4/jlpWWY+y8lU1NrBhyHJGlcTHRi9XavJKlt3gqWJKlFJlZJklpkYpUkqUUmVkmSWmRilSSpRSZW\nSZJaNNTEmmRrkpkklyf55yT3bGHMk5O8fYn7WuRcktSqYc9Yt1TVEVV1KHA78NKldkyyUOxL/IFq\n7fTavPnapYYgSdJOhp1Ye30GeBBAkjOTXNzMZF+4bYckNyX58ySXAmuTPCrJZ5NcluSCJHs2u94v\nySeSXJnkz4ZwLpKkCTXslZcCkOTuwFOBTzTtv1FVNza3hi9O8qGq+iGwJ/D5qnpVknsAXwWeVVUz\nSfYCftL0fyRwGN1Z8JVJ3lZV3x3geUmSJtSwZ6x7JJkBLgKuBU5r2v93ksuAC4CfBw5q2u8APtxs\n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\nZpeMS3J/Fl8/eFFJdms2e0vGPRL4SJJbqurcufpZ6FyS1LZB3gpe8Ae3SfZNcmaSTUk+l+TQedoP\nadrXJzk9yfl0C6LvoKo2Aa8BXt6Hc5EkaU6DTKx79NwK/tAcn28EZqrqkcApbE+Ws9vP6OlzMHBM\nVZ04zzFngIe0E74kSYsb5K3gW2bfCp7lKOB4gKo6N8l+Sfaep32vps/Hquq2BcZc0bJUkiQt16Dr\nsS7XYs9ftyzy+RHAFQvtsK3Q+exit5Kk8dfpdOh0Oq2OObBF+JPcVFV7z2pbB7yyqo5N8lbg+qp6\nbZJp4E1VdeQC7euBm6rqzT1jvaqqnt68fwTwEeD5VdWZIx7rsUqSdtDGIvyDnLEulsE2AO9Jsonu\nTPTkedpPWmCMo5JcAuwJbAZeNldSlSSpXya6bBw4Y5UkbWfZuBWy0LkkqW0TPWOd1HOXJM3NGask\nSSPGxCpJUotMrJIktcjEKklSi0yskiS1yMQqSVKLTKySJLVooIk1ydae0nEzSQ5Isi7JWS0f5y1J\nvrPYfvvvf2Cbh5UkaeDVbbbMLh2X5P4svo7wopLsVlVbkwR4BvCtJOuq6tPz9dm8+dqVHlaSpB0M\n+lbwgqtZJNk3yZlJNiX5XJJD52k/pGlfn+T0JOezvTD6NPAl4J3Ac/t3KpIk7WzQM9Y9kszQTbBX\nV9UJsz7fCMxU1XFJjqabLA+fo/2Mph3gYODxPQXPfw34R+As4PXbZrL9PS1JkroGnVhvmX0reJaj\ngOMBqurcJPsl2Xue9r2aPh/bllST3AN4GvA7VbUlyUXALwEf79P5SJK0g0En1l2x2PPXLT3bvwTs\nA1zePGvdA7iFBRLrhg0bAJienmZ6enolcUqSVplOp0On02l1zIFWt0lyU1XtPattHfDKqjo2yVuB\n66vqtUmmgTdV1ZELtK8HbqqqNzdj/QPw0ar6QPP+XsA1wJqq+sms41qPVZK0gzaq2wx6xrpYFtsA\nvCfJJroz0ZPnaT9pdscke9Cdsb7kroNV3ZLkM8DTgX9ZafCSJC1mouuxgjNWSdJ21mNdoampNcMO\nQZI0ZiZ6xjqp5y5JmpszVkmSRoyJVZKkFplYJUlqkYlVkqQWmVglSWqRiVWSpBYNPLH2u9h5M9aN\nPcc4u41xJUlaimEswt/XYufN5nlVdexKx5MkabmGcSt4EMXOV/TjXkmSdtUwEusePbdpPzTH59uK\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x1fc3a3c8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "feature_importances = pd.Series(model.feature_importances_,index=X[numeric_variables].columns)\n",
    "feature_importances.sort()\n",
    "feature_importances.plot(kind=\"barh\", figsize=(7,6))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8271604938271605"
      ]
     },
     "execution_count": 299,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = map(lambda x: x>.656 and 1 or 0,y_oob)\n",
    "\n",
    "from sklearn.metrics import accuracy_score\n",
    "accuracy_score(test ,result)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'FloorA',\n",
       " 'FloorB',\n",
       " 'FloorC',\n",
       " 'FloorD',\n",
       " 'FloorE',\n",
       " 'FloorF',\n",
       " 'FloorG',\n",
       " 'FloorNone'}"
      ]
     },
     "execution_count": 304,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Produce the Kaggle submission based on the Test file\n",
    "import pandas as pd\n",
    "from sklearn.cross_validation import train_test_split\n",
    "from sklearn.ensemble import RandomForestRegressor\n",
    "from sklearn.metrics import roc_auc_score\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "X = pd.read_csv(\"test.csv\")\n",
    "\n",
    "X['Gender'] =X['Sex'].map( {'female': -1, 'male': 1} ).astype(int)\n",
    "#train = train['Embarked'].where(train['Embarked'].notnull(train),None)\n",
    "X['Embarked_clean'] = X.Embarked.fillna('N')\n",
    "X['CleanAge'] = X.Age.fillna(X.Age.mean())\n",
    "X['Fare'] = X.Fare.fillna(X.Fare.mean())\n",
    "X = pd.concat([X,CleanAge], axis=1)\n",
    "def clean_cabin(x):\n",
    "    try:\n",
    "        return x[0]\n",
    "    except TypeError:\n",
    "        return \"None\"\n",
    "\n",
    "X[\"Clean_Cabin\"]    = \"Floor\"+X.Cabin.apply(clean_cabin)\n",
    "X.drop([\"Name\",\"Ticket\",\"PassengerId\",\"Sex\",\"Embarked\",\"Age\",\"Cabin\"],axis=1, inplace=True)\n",
    "set(X.Clean_Cabin)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "##Create the dummies\n",
    "dummies = pd.get_dummies(X['Embarked_clean'])\n",
    "X = pd.concat([X,dummies], axis=1)\n",
    "X['N'] =0\n",
    "\n",
    "dummies = pd.get_dummies(X['Clean_Cabin'])\n",
    "X = pd.concat([X,dummies], axis=1)\n",
    "X['FloorT'] = 0\n",
    "\n",
    "\n",
    "X.drop([\"Clean_Cabin\",\"Embarked_clean\"],axis=1, inplace=True)\n",
    "\n",
    "numeric_variables = list(X.dtypes[X.dtypes != \"object\"].index)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 316,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#X.describe()\n",
    "cols = list(X.columns.values)\n",
    "X = X[['Pclass', 'SibSp', 'Parch', 'Fare', 'Gender', 'CleanAge', 'C', 'N', 'Q', 'S', 'FloorA', 'FloorB', 'FloorC', 'FloorD', 'FloorE', 'FloorF', 'FloorG', 'FloorNone', 'FloorT']]\n",
    "\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "metadata": {
    "collapsed": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Pclass</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Gender</th>\n",
       "      <th>CleanAge</th>\n",
       "      <th>C</th>\n",
       "      <th>N</th>\n",
       "      <th>Q</th>\n",
       "      <th>S</th>\n",
       "      <th>FloorA</th>\n",
       "      <th>FloorB</th>\n",
       "      <th>FloorC</th>\n",
       "      <th>FloorD</th>\n",
       "      <th>FloorE</th>\n",
       "      <th>FloorF</th>\n",
       "      <th>FloorG</th>\n",
       "      <th>FloorNone</th>\n",
       "      <th>FloorT</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.308642</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>0.295174</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.188552</td>\n",
       "      <td>0.002245</td>\n",
       "      <td>0.086420</td>\n",
       "      <td>0.722783</td>\n",
       "      <td>0.016835</td>\n",
       "      <td>0.052750</td>\n",
       "      <td>0.066218</td>\n",
       "      <td>0.037037</td>\n",
       "      <td>0.035915</td>\n",
       "      <td>0.014590</td>\n",
       "      <td>0.004489</td>\n",
       "      <td>0.771044</td>\n",
       "      <td>0.001122</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>0.836071</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>0.955979</td>\n",
       "      <td>13.002015</td>\n",
       "      <td>0.391372</td>\n",
       "      <td>0.047351</td>\n",
       "      <td>0.281141</td>\n",
       "      <td>0.447876</td>\n",
       "      <td>0.128725</td>\n",
       "      <td>0.223659</td>\n",
       "      <td>0.248802</td>\n",
       "      <td>0.188959</td>\n",
       "      <td>0.186182</td>\n",
       "      <td>0.119973</td>\n",
       "      <td>0.066890</td>\n",
       "      <td>0.420397</td>\n",
       "      <td>0.033501</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>-1.000000</td>\n",
       "      <td>22.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>35.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           Pclass       SibSp       Parch        Fare      Gender    CleanAge  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean     2.308642    0.523008    0.381594   32.204208    0.295174   29.699118   \n",
       "std      0.836071    1.102743    0.806057   49.693429    0.955979   13.002015   \n",
       "min      1.000000    0.000000    0.000000    0.000000   -1.000000    0.420000   \n",
       "25%      2.000000    0.000000    0.000000    7.910400   -1.000000   22.000000   \n",
       "50%      3.000000    0.000000    0.000000   14.454200    1.000000   29.699118   \n",
       "75%      3.000000    1.000000    0.000000   31.000000    1.000000   35.000000   \n",
       "max      3.000000    8.000000    6.000000  512.329200    1.000000   80.000000   \n",
       "\n",
       "                C           N           Q           S      FloorA      FloorB  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean     0.188552    0.002245    0.086420    0.722783    0.016835    0.052750   \n",
       "std      0.391372    0.047351    0.281141    0.447876    0.128725    0.223659   \n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "50%      0.000000    0.000000    0.000000    1.000000    0.000000    0.000000   \n",
       "75%      0.000000    0.000000    0.000000    1.000000    0.000000    0.000000   \n",
       "max      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000   \n",
       "\n",
       "           FloorC      FloorD      FloorE      FloorF      FloorG   FloorNone  \\\n",
       "count  891.000000  891.000000  891.000000  891.000000  891.000000  891.000000   \n",
       "mean     0.066218    0.037037    0.035915    0.014590    0.004489    0.771044   \n",
       "std      0.248802    0.188959    0.186182    0.119973    0.066890    0.420397   \n",
       "min      0.000000    0.000000    0.000000    0.000000    0.000000    0.000000   \n",
       "25%      0.000000    0.000000    0.000000    0.000000    0.000000    1.000000   \n",
       "50%      0.000000    0.000000    0.000000    0.000000    0.000000    1.000000   \n",
       "75%      0.000000    0.000000    0.000000    0.000000    0.000000    1.000000   \n",
       "max      1.000000    1.000000    1.000000    1.000000    1.000000    1.000000   \n",
       "\n",
       "           FloorT  \n",
       "count  891.000000  \n",
       "mean     0.001122  \n",
       "std      0.033501  \n",
       "min      0.000000  \n",
       "25%      0.000000  \n",
       "50%      0.000000  \n",
       "75%      0.000000  \n",
       "max      1.000000  "
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "check_train.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "#Run the prediction\n",
    "new_pred_class = model.predict(X[numeric_variables])\n",
    "\n",
    "#new_pred_class = y_oob\n",
    "result = map(lambda x: x>.656 and 1 or 0,new_pred_class)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "metadata": {
    "collapsed": false
   },
   "outputs": [],
   "source": [
    "new_pred_class = result\n",
    "\n",
    "pd.DataFrame({'PassengerId':train.PassengerId, 'Survived':new_pred_class}).set_index('PassengerId').to_csv('sub_trees_v3.csv')"
   ]
  }
 ],
 "metadata": {
  "anaconda-cloud": {},
  "kernelspec": {
   "display_name": "Python [Root]",
   "language": "python",
   "name": "Python [Root]"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 0
}
